#!/bin/bash

# Exit immediately on error or undefined variable
set -e
set -u

# Creates a new pair of dummy RS252 priv/pub keys (in DER and PEM format) for
# signing/verifying mock JWTs during development
#
# NOTE:
# This is a convenience function for admins and not normally needed (since the
# repo should already contain a dummy RS252 keypair for dev use)
#
function do_newkeys ()
{
  echo "Creating new dummy RS252 keypair (in DER and PEM format) for signing/verifying mock JWTs during development"
  openssl genpkey -algorithm RSA -outform DER -out ${1}/privkey.der -pkeyopt rsa_keygen_bits:4096
  openssl rsa -inform DER -outform DER -in ${1}/privkey.der -out ${1}/pubkey.der -pubout
  openssl rsa -inform DER -outform PEM -in ${1}/privkey.der -out ${1}/privkey.pem
  openssl rsa -inform DER -outform PEM -in ${1}/privkey.der -out ${1}/pubkey.pem -pubout
  chmod 600 ${1}/privkey.der
  chmod 644 ${1}/pubkey.der
  chmod 600 ${1}/privkey.pem
  chmod 644 ${1}/pubkey.pem
}

# Installs jwt-cli binary for JWT encoding/decoding (requires sudo)
function do_install ()
{
  echo "Downloading and installing jwt-cli binary (to /usr/local/bin/jwt-cli)"
  TMPDIR="$(mktemp -d -q -p /tmp jwt.XXXXXXXXXXXXXXXXXXXX)"
  curl -fsSL https://github.com/mike-engel/jwt-cli/releases/download/2.3.0/jwt-cli-2.3.0-linux.tar.gz | tar zxC ${TMPDIR} --strip-components 2
  chmod 755 ${TMPDIR}/jwt
  mv ${TMPDIR}/jwt /usr/local/bin/jwt-cli
  rm -rf ${TMPDIR}
}

# Generates a dummy JWT to allow simulating authorisation with the flaskapp
function do_create_token ()
{
  if [ ! -f "${2}" ]; then
    echo "Error generating token (could not find private key: ${2})"
  else
    if [ "${1}" = "admin" ]; then
      jwt-cli encode -A RS256 -S @"${2}" -e $(date --date="1hour" +%s) -i "AuthN" -s "admin" '{"aud":"server:flaskapp", "admin":true}'
    else
      jwt-cli encode -A RS256 -S @"${2}" -e $(date --date="1hour" +%s) -i "AuthN" -s "joeblogs" '{"aud":"server:flaskapp", "admin":false}'
    fi
  fi
}

# Decodes a token generated by do_create_token()
function do_decode_token ()
{
  if [ ! -f "${1}" ]; then
    echo "Error decoding token (could not find public key: ${1})"
  else
    jwt-cli decode -A RS256 -S @"${1}" ${2}
  fi
}

# !!! Main script execution starts HERE

if [ "${1}" = "install" ]; then
  do_install

elif [ "${1}" = "token" ]; then
  do_create_token "${2}" "${3}"

elif [ "${1}" = "decode" ]; then
  do_decode_token "${2}" "${3}"

elif [ "${1}" = "newkeys" ]; then
  do_newkeys "${2}"

else
    : # Do nothing
fi

exit 0
